import { useState, useEffect } from 'react';
import axios from 'axios';
import './UserStatistics.css';

const UserStatistics = () => {
  const [users, setUsers] = useState([]);
  const [currentPage, setCurrentPage] = useState(1);
  const [searchTerm, setSearchTerm] = useState('');
  const [sortOrder, setSortOrder] = useState('asc');
  const [toggle, setToggle] = useState(false);
  const [editUser, setEditUser] = useState(null);
  const usersPerPage = 4;

  useEffect(() => {
    axios
      .get('http://localhost:3000/users')
      .then((response) => {
        setUsers(response.data);
      })
      .catch((error) => {
        console.error('There was an error fetching the users!', error);
      });
  }, []);

  const handleSearchChange = (e) => {
    setSearchTerm(e.target.value);
  };

  const handleSortClick = () => {
    const newSortOrder = sortOrder === 'asc' ? 'desc' : 'asc';
    setSortOrder(newSortOrder);
  };

  const handleToggle = () => {
    setToggle(!toggle);
    setEditUser(null); // Reset edit state when toggling
  };

  const handleDelete = async (id) => {
    try {
      await axios.delete(`http://localhost:3000/users/${id}`);
      setUsers(users.filter(user => user.id !== id));
    } catch (error) {
      console.error('Error deleting user', error);
    }
  };

  const handleEditClick = (user) => {
    setEditUser(user);
    setToggle(true);
  };

  const handleSave = async () => {
    const user = {
      id: editUser ? editUser.id : Date.now(), // Use a unique ID for new users
      avatar: document.querySelector('#addUser input[placeholder="Ảnh đại diện"]').value,
      lastName: document.querySelector('#addUser input[placeholder="Tên người dùng"]').value,
      email: document.querySelector('#addUser input[placeholder="Email"]').value,
      password: document.querySelector('#addUser input[placeholder="Mật khẩu"]').value,
      address: document.querySelector('#addUser input[placeholder="Địa chỉ"]').value,
      phoneNumber: document.querySelector('#addUser input[placeholder="Số điện thoại"]').value,
    };

    try {
      if (editUser) {
        await axios.put(`http://localhost:3000/users/${editUser.id}`, user);
        setUsers(users.map(u => (u.id === editUser.id ? user : u)));
      } else {
        const response = await axios.post('http://localhost:3000/users', user);
        setUsers([...users, response.data]);
      }
      setToggle(false);
      setEditUser(null);
    } catch (error) {
      console.error('Error saving user', error);
    }
  };

  const filteredUsers = users.filter((user) =>
    user.lastName.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const sortedUsers = filteredUsers.sort((a, b) => {
    if (sortOrder === 'asc') {
      return a.lastName.localeCompare(b.lastName);
    } else {
      return b.lastName.localeCompare(a.lastName);
    }
  });

  // Calculate pagination
  const indexOfLastUser = currentPage * usersPerPage;
  const indexOfFirstUser = indexOfLastUser - usersPerPage;
  const currentUsers = sortedUsers.slice(indexOfFirstUser, indexOfLastUser);
  const totalPages = Math.ceil(sortedUsers.length / usersPerPage);

  const handlePageChange = (pageNumber) => {
    setCurrentPage(pageNumber);
  };

  return (
    <>
      <div id='userStatistics'>
        <h2>Quản lý người dùng</h2>
        <div className='search-sort-pagination'>
          <div className='search-user'>
            <input 
              type='text' 
              placeholder='Search user'
              value={searchTerm} 
              onChange={handleSearchChange}
            />
            <button onClick={handleSortClick}>Sắp xếp</button>
            <button onClick={handleToggle}>Thêm người dùng</button>
          </div>
        </div>
        {toggle && (
          <div id='addUser'>
            <h3>{editUser ? 'Chỉnh sửa người dùng' : 'Thêm người dùng mới'}</h3>
            <input type='text' placeholder='Tên người dùng' defaultValue={editUser ? editUser.lastName : ''} />
            <input type='text' placeholder='Email' defaultValue={editUser ? editUser.email : ''} />
            <input type='text' placeholder='Mật khẩu' defaultValue={editUser ? editUser.password : ''} />
            <input type='text' placeholder='Địa chỉ' defaultValue={editUser ? editUser.address : ''} />
            <input type='text' placeholder='Số điện thoại' defaultValue={editUser ? editUser.phoneNumber : ''} />
            <div className='btn'>
              <button onClick={handleSave}>{editUser ? 'Lưu' : 'Thêm mới người dùng'}</button>
              <button onClick={handleToggle}>Huỷ</button>
            </div>
          </div>
        )}
        <div id='userStatistics-table'>
          <table>
            <thead>
              <tr>
                <th>Tên người dùng</th>
                <th>Email</th>
                <th>Điện thoại</th>
                <th>Thao tác</th>
              </tr>
            </thead>
            <tbody>
              {currentUsers.map((user) => (
                <tr key={user.id}>
                  <td>{user.lastName}</td>
                  <td>{user.email}</td>
                  <td>{user.phoneNumber}</td>
                  <td>
                    <button onClick={() => handleEditClick(user)}>Sửa</button>
                    <button onClick={() => handleDelete(user.id)}>Xoá</button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
        <div className='pagination'>
          {Array.from({ length: totalPages }, (_, index) => (
            <button
              key={index + 1}
              onClick={() => handlePageChange(index + 1)}
              className={currentPage === index + 1 ? 'active' : ''}
            >
              {index + 1}
            </button>
          ))}
        </div>
      </div>
    </>
  );
};

export default UserStatistics;
