import { useState, useEffect } from 'react';
import './ProductStatistics.css';

const ProductStatistics = () => {
  const [toggle, setToggle] = useState(false);
  const [products, setProducts] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [sortOrder, setSortOrder] = useState('asc');
  const [currentPage, setCurrentPage] = useState(1);
  const [editProduct, setEditProduct] = useState(null);
  const productsPerPage = 5;

  const handleToggle = () => {
    setToggle(!toggle);
    setEditProduct(null); // Reset edit state when toggling
  };

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response1 = await fetch('http://localhost:3000/foods');
        const data1 = await response1.json();
        const response2 = await fetch('http://localhost:3000/vietfood');
        const data2 = await response2.json();
        const response3 = await fetch('http://localhost:3000/asiafood');
        const data3 = await response3.json();
        const response4 = await fetch('http://localhost:3000/europeanfood');
        const data4 = await response4.json();
        const response5 = await fetch('http://localhost:3000/koreanfood');
        const data5 = await response5.json();
        const response6 = await fetch('http://localhost:3000/japanesefood');
        const data6 = await response6.json();
        const response7 = await fetch('http://localhost:3000/dessertsfood');
        const data7 = await response7.json();

        const combinedData = [
          ...data1,
          ...data2,
          ...data3,
          ...data4,
          ...data5,
          ...data6,
          ...data7,
        ];
        setProducts(combinedData);
      } catch (error) {
        console.error('Error fetching data', error);
      }
    };

    fetchData();
  }, []);

  const handlePageChange = (pageNumber) => {
    setCurrentPage(pageNumber);
  };

  const handleSortClick = () => {
    const sortedProducts = [...products].sort((a, b) => {
      if (sortOrder === 'asc') {
        return a.name.localeCompare(b.name);
      } else {
        return b.name.localeCompare(a.name);
      }
    });
    setProducts(sortedProducts);
    setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');
  };

  const handleDelete = async (id) => {
    try {
      await fetch(`http://localhost:3000/products/${id}`, {
        method: 'DELETE',
      });
      setProducts(products.filter(product => product.id !== id));
    } catch (error) {
      console.error('Error deleting product', error);
    }
  };

  const handleEditClick = (product) => {
    setEditProduct(product);
    setToggle(true);
  };

  const handleSave = async (newProduct) => {
    try {
      if (editProduct) {
        await fetch(`http://localhost:3000/products/${editProduct.id}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(newProduct),
        });
        setProducts(products.map(product => (product.id === editProduct.id ? newProduct : product)));
      } else {
        const response = await fetch('http://localhost:3000/products', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(newProduct),
        });
        const addedProduct = await response.json();
        setProducts([...products, addedProduct]);
      }
      setToggle(false);
      setEditProduct(null);
    } catch (error) {
      console.error('Error saving product', error);
    }
  };

  const filteredProducts = products.filter(product =>
    product.name.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const indexOfLastProduct = currentPage * productsPerPage;
  const indexOfFirstProduct = indexOfLastProduct - productsPerPage;
  const currentProducts = filteredProducts.slice(indexOfFirstProduct, indexOfLastProduct);

  const pageNumbers = [];
  for (let i = 1; i <= Math.ceil(filteredProducts.length / productsPerPage); i++) {
    pageNumbers.push(i);
  }

  return (
    <>
      <div id='productStatistics'>
        <h2>Thống kê sản phẩm</h2>
        <div className='searchProduct'>
          <input
            type='text'
            placeholder='Search product'
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
          <button onClick={handleSortClick}>Sắp xếp</button>
          <button onClick={handleToggle}>Thêm sản phẩm</button>
        </div>
        {toggle && (
          <div id='addProduct'>
            <h3>{editProduct ? 'Chỉnh sửa sản phẩm' : 'Thêm sản phẩm mới'}</h3>
            <input
              type='text'
              placeholder='Ảnh sản phẩm'
              defaultValue={editProduct ? editProduct.image : ''}
            />
            <input
              type='text'
              placeholder='Tên sản phẩm'
              defaultValue={editProduct ? editProduct.name : ''}
            />
            <input
              type='text'
              placeholder='Tên nhà hàng'
              defaultValue={editProduct ? editProduct.restaurant : ''}
            />
            <input
              type='text'
              placeholder='Địa chỉ'
              defaultValue={editProduct ? editProduct.address : ''}
            />
            <input
              type='text'
              placeholder='Giá'
              defaultValue={editProduct ? editProduct.price : ''}
            />
            <input
              type='text'
              placeholder='Mô tả'
              defaultValue={editProduct ? editProduct.review : ''}
            />
            <div className='btn'>
              <button
                onClick={() =>
                  handleSave({
                    id: editProduct ? editProduct.id : Date.now(), // Use a unique ID for new products
                    image: document.querySelector('#addProduct input[placeholder="Ảnh sản phẩm"]').value,
                    name: document.querySelector('#addProduct input[placeholder="Tên sản phẩm"]').value,
                    restaurant: document.querySelector('#addProduct input[placeholder="Tên nhà hàng"]').value,
                    address: document.querySelector('#addProduct input[placeholder="Địa chỉ"]').value,
                    price: document.querySelector('#addProduct input[placeholder="Giá"]').value,
                    description: document.querySelector('#addProduct input[placeholder="Mô tả"]').value,
                  })
                }
              >
                {editProduct ? 'Lưu' : 'Thêm sản phẩm mới'}
              </button>
              <button onClick={handleToggle}>Hủy</button>
            </div>
          </div>
        )}
        <div className='pagination'>
          {pageNumbers.map(number => (
            <button
              key={number}
              onClick={() => handlePageChange(number)}
              className={number === currentPage ? 'active' : ''}
            >
              {number}
            </button>
          ))}
        </div>
        <table>
          <thead>
            <tr>
              <th>Ảnh sản phẩm</th>
              <th onClick={handleSortClick}>Tên sản phẩm {sortOrder === 'asc' ? '▲' : '▼'}</th>
              <th>Tên nhà hàng</th>
              <th>Địa chỉ</th>
              <th>Giá</th>
              <th>Mô tả</th>
              <th>Thao tác</th>
            </tr>
          </thead>
          <tbody>
            {currentProducts.map((product, index) => (
              <tr key={index}>
                <td><img src={product.image} alt='product' /></td>
                <td>{product.name}</td>
                <td>{product.restaurant}</td>
                <td>{product.address}</td>
                <td>{product.price}</td>
                <td>{product.review}</td>
                <td>
                  <button onClick={() => handleEditClick(product)}>Sửa</button>
                  <button onClick={() => handleDelete(product.id)}>Xóa</button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </>
  );
};

export default ProductStatistics;